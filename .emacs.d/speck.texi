\input texinfo
@setfilename speck
@settitle Speck

@dircategory Emacs misc features
@direntry
* Speck: (speck).       Speck - a minor mode for spell checking.
@end direntry

@copying
This manual documents Speck - a minor mode to check the spelling of
Emacs buffers.

Copyright @copyright{} 2008 Martin Rudalics

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory Emacs
@direntry
* Speck: (speck). A minor mode to check the spelling of Emacs buffers.
@end direntry

@titlepage
@title Speck -- a minor mode to check the spelling of Emacs buffers.
@author Martin Rudalics
@author @email{rudalics@@gmx.at}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Speck

This manual documents Speck - a minor mode to check the spelling of
Emacs buffers.

@end ifnottex

@menu
* Overview::
* Detecting Misspelled Words::
* Correcting Misspelled Words::
* Handling Dictionaries::
* Saving Settings to File::
* Additional Functionality::
* Aspell Interface::
* Ispell Interface::
* Problems and Extensions::
@end menu



@node Overview, Detecting Misspelled Words, top, top
@unnumbered Overview

@noindent
Speck is another minor mode to check the spelling of Emacs buffers.
Like @code{ispell} and @code{flyspell}, @xref{(emacs)Spelling}, Speck
relies on the Aspell or Ispell spell checker engines to detect
misspelled words and suggest corrections.  Speck differs from
@code{ispell} and @code{flyspell} in the following aspects:

@itemize @bullet
@item
Speck checks the spelling of a word if and only if the word is actually
displayed in an Emacs window.  There are no separate commands to check
the spelling of a single word, region, or the entire buffer.

@item
Speck's operations are triggered by an idle timer.  In practice this
means that spelling is checked only when you pause typing.

@item
You can set up Speck to use different dictionaries for disjoint
stretches of text in one and the same buffer.

@item
Speck preserves dictionary and other settings on a per-buffer basis.
Hence you can check the spelling of several buffers simultaneously,
without losing your settings or introducing mutual side-effects.

@item
Dictionary and other settings can be saved to the file you're visiting
and you can resume editing with restored settings.
@end itemize

@noindent
Unlike @code{flyspell}, Speck does @emph{not} require the @code{ispell}
feature.  Hence you can run, for example, @w{(1) Speck} with the Aspell
engine and an English dictionary, and @w{(2) Speck} (or
@code{ispell-word}) with the Ispell engine and a French dictionary,
at the same time, in one and the same buffer.

In case you just want to use different languages in the same buffer but
continue working with @code{ispell} or @code{flyspell}, you are probably
better off with Peter Heslin's excellent @code{ispell-multi} package,
see @indicateurl{http://www.dur.ac.uk/p.j.heslin/Software/Emacs/}.



@node Detecting Misspelled Words, Correcting Misspelled Words, Overview, top
@unnumbered Detecting Misspelled Words

To invoke Speck type @w{@kbd{M-x speck-mode}}.  When you now pause
typing, Speck will examine the selected window for chunks of text whose
spelling has not been checked yet.  If Speck finds such a chunk, it will
send it to the Aspell or Ispell engine, analyze the results, and
highlight misspelled words appropriately.  When you resume typing, Speck
will suspend its activities and wait till you pause again.

You can tell Speck which spell checker engine you want to use by
customizing the variable @code{speck-engine}.  In separate sections we
explain how to tune Speck's interaction with Aspell, @xref{Aspell
Interface}, and Ispell, @xref{Ispell Interface}.

To tell Speck how long it shall wait before resuming its activity when
you pause typing, customize the option @code{speck-delay}.  You might
also want to customize the option @code{speck-pause} for tuning Speck's
time-slices.

Text that has been examined by Speck is marked (invisibly) with the text
property @code{specked} to avoid that Speck examines the same text over
and over again.  When you later modify text that has been marked as
@code{specked}, Speck will undo the marking in a suitable portion around
the modified text and eventually resend the modified text to the spell
checker engine.

Speck always examines unmarked text around @code{window-point} of the
selected window first.  Thereafter it continues with the first unmarked
chunk on the selected window.  As soon as the entire selected window has
been examined, Speck will consider unselected windows.

By default, Speck does not examine the word you are about to type (the
@dfn{chunk at point}) until it is convinced that you have entered it
completely.  You can customize the options @code{speck-chunk-at-point}
and @code{speck-chunk-at-point-commands} to change Speck's behavior in
this respect.

Unless otherwise specified, Speck has Aspell/Ispell use their standard
dictionaries for spell-checking.  You can select another dictionary by
customizing @code{speck-aspell-default-dictionary-name} (@pxref{Aspell
Interface}) or @code{speck-ispell-default-dictionary-name}
(@pxref{Ispell Interface}).  Customizing these variables should also get
you an overview of all dictionaries and the corresponding
@dfn{dictionary codes} installed on your system.

Speck's default lighter displays the code of the currently valid
dictionary in the mode line.  That lighter changes color (from red to
green) when examining the associated window is complete.  Customize the
options @code{speck-lighter}, @code{speck-mode-line-specking} and
@code{speck-mode-line-specked} and the faces
@code{speck-mode-line-specking} and @code{speck-mode-line-specked} if
you don't like the default behavior.



@node Correcting Misspelled Words, Handling Dictionaries, Detecting Misspelled Words, top
@unnumbered Correcting Misspelled Words

Speck highlights misspelled words with the faces @code{speck-guess} and
@code{speck-miss}.  @code{speck-miss} means the spell checker engine
doesn't know how to correct the misspelling.  In this case you can
either correct the word manually or accept the word as described below.

@code{speck-guess} means that Aspell/Ispell did provide suggestions for
correcting the misspelling.  In this case you can correct the word with
the following commands (at the end of the present section we'll describe
how to easily change the key bindings for these as well as other
commands used for replacing/accepting misspelled words):

@kbd{C-,} (@code{speck-replace-previous})

@kbd{C-M-,} (@code{speck-replace-next})

@noindent
These commands overlay the first misspelled word before or after point
with a suggestion provided by Aspell/Ispell.  With a numeric prefix
argument @code{ARG} they overlay the ARGth misspelled word before or
after point.

If you now enter @kbd{C-.} Speck actually replaces the misspelled word
with the suggestion.  In practice, you do not have to type @kbd{C-.}
explicitly: typing anything but a command cited here will have the same
effect.  Entering @kbd{C-!} will also replace the misspelled word but in
addition query to replace further occurrences of that word in the
current buffer.

@kbd{C-,} rotates to the next suggestion, @kbd{C-M-,} to the previous
one.  @kbd{C-g} quits, not installing any suggestion and leaving the
initial highlighting in place.  @kbd{C-h} displays a list of all
commands and their bindings available in the present context.  Note that
by default @kbd{C-_} does not restore the previous suggestion.  You can
set up such a binding by customizing @code{speck-replace-keys} if you
like.


If you think Speck wrongly marked a word as misspelled you can use the
commands

@kbd{C-+} (@code{speck-add-previous})

@kbd{C-M-+} (@code{speck-add-next})

@noindent
to ``accept'' the first (or ARGth with numeric prefix argument
@code{ARG}) misspelled word before or after point.  You will be prompted
to type either of the following four characters:

@multitable @columnfractions .1 .8
@item @code{p}
@tab To add the word to your personal dictionary.
@item @code{b}
@tab To add the word to the list of words accepted for the current
buffer.
@item @code{f}
@tab To add the word to the list of words accepted for the file
associated with the current buffer.
@item @code{d}
@tab To add the word to the list of words accepted for the dictionary
whose code appears in the prompt.
@end multitable

@noindent
Typing anything else leaves the current state of your personal
dictionary and any word lists unaltered.


The commands

@kbd{C-.} (@code{speck-popup-menu-previous})

@kbd{C-M-.} (@code{speck-popup-menu-next})

@noindent
are similar to @kbd{C-,} and @kbd{C-M-,} but pop up menus near the
position of the misspelling.  Alternatively, you can pop up these menus
by moving the mouse to the misspelled word until it gets highlighted
with @code{speck-mouse} face and typing @kbd{down-mouse-3}.

In any case, the menu should present you the corrections proposed by
Aspell/Ispell.  In addition, the menu permits to enter the correct word
manually, add the word to your personal dictionary or the list of words
accepted for the current buffer, file, or dictionary.

If you replace the word and the option @code{speck-replace-query} is
non-@code{nil}, Speck will query to replace further occurrences of that
word in the current buffer.


Speck uses a separate keymap for querying: In particular, @kbd{C-!}
will replace the current occurrence and continue the query, @kbd{C-.}
replace the occurrence and quit querying, @kbd{C--} not replace and
continue, @kbd{C-g} not replace and quit querying.  You can learn about
these and other bindings by typing @kbd{C-h} when prompted during a
query.

You can change Speck's default key bindings by customizing
@code{speck-mode-keys}.  The keymap for correcting misspelled words can
be customized via @code{speck-replace-keys}.  To change the default
bindings for queries customize @code{speck-replace-query-keys}.

When point is within a misspelled word, it is not entirely clear where
point should go after the word has been replaced.  The option
@code{speck-replace-preserve-point} permits you to either place point
before or after the word, or at the original offset within the word.



@node Handling Dictionaries, Saving Settings to File, Correcting Misspelled Words, top
@unnumbered Handling Dictionaries

If you want to use another dictionary just for checking the current
buffer, (re-)start Speck with the command @w{@kbd{M-x speck-buffer}} and
a prefix argument.  @kbd{-} as prefix argument for this command will
prompt you to enter a dictionary code.  To make this operation more
handy you should set up associations in
@code{speck-dictionary-names-alist}.  This will enable you to type a
numeric prefix argument corresponding to a dictionary.

Once you've set up a dictionary for a buffer, toggling @code{speck-mode}
or invoking @code{speck-buffer} for that buffer without prefix argument
will not alter the dictionary.  Call @code{speck-buffer} with a prefix
argument zero to enforce using the default dictionary for that buffer.

To work with multiple dictionaries in one and the same buffer use the
command @code{speck-multi-set}.  In Transient Mark mode, when the mark
is active, this command sets the dictionary for the entire region.
Otherwise, @code{speck-multi-set} sets the dictionary for text inserted
by the next (interactively called) command.

Typing @code{speck-multi-set} without prefix argument will prompt for a
dictionary code.  If you type @key{RET} now, Speck will switch to the
default dictionary.  Typing a dictionary code will switch to the
corresponding dictionary.

With a prefix argument @code{ARG} @code{speck-multi-set} works as
follows: If @code{ARG} is not a number, spell-checking is suppressed.
If @code{ARG} is zero use the default dictionary.  For any other number,
Speck checks whether @code{speck-dictionary-names-alist} contains an
entry for that number.  If such an entry exists, Speck will use the
associated dictionary.  Otherwise you will be prompted for a dictionary
code.

Dictionary properties set up with @code{speck-multi-set} are kept in the
buffer with the help of the text property @code{speck}.  By default,
this property is inherited to characters you type by using the standard
inheritance mechanism.  You can change the default behavior by
customizing the variable @code{speck-self-insert-inherit}: The value
@code{line} inherits from the preceding character unless the character
is inserted at the beginning of a line in which case properties are
inherited from the following character provided it exists and is not a
whitespace character.  The value @code{white} inherits from the
preceding character unless there is none or it is a whitespace character
in which case properties are inherited from the following character
unless there is none or it is a whitespace character.

The default lighter of Speck has been programmed to display the
dictionary valid for the next character you will type at
@code{window-point} in accordance with the inheritance mechanism chosen.



@node Saving Settings to File, Additional Functionality, Handling Dictionaries, top
@unnumbered Saving Settings to File

This section will be of interest to you when you occasionally have to
interrupt an Emacs session before spell-checking some buffer is complete
or you want to continue spell-checking on another machine.  If you have
settings for multiple dictionaries in your buffer, you might want to
restore these settings in another session.  Also, you probably want to
preserve information about words accepted earlier for this file
(@pxref{Correcting Misspelled Words}).

Saving settings to a file is not entirely trivial because Speck has to
change the contents of that file.  To avoid confusing other programs
processing that file, Speck usually tries to enclose such information in
comments.  If the buffer's mode does not define a comment syntax, you
should be aware of the strings Speck uses to designate the special
sections it writes to files.

The option @code{speck-save-ask} permits to specify whether any of
Speck's specifications shall be written to or read from the visited file
and whether Speck shall ask you before doing that.

Speck uses annotations (@pxref{(elisp)Format Conversion}) to write
multi-dictionary information to files.  Note that the annotations
interface has not been tested widely yet.  Hence you should handle this
interface with care and probably always keep a ``clean'' copy of your
text around.  The major entry point for producing annotations is the
option @code{speck-multi-style}.  The following choices are available:

@multitable @columnfractions .2 .7
@item @code{None} 
@tab Do not read or write multi-dictionary information.

@item @code{EOF}
@tab Insert multi-dictionary information at the end of the file.

@item @code{Standard}
@tab Intersperse multi-dictionary information with ordinary text.
@end multitable

@noindent
When you choose @code{None} Speck (1) won't produce annotations from
text properties even if the buffer contains them, and (2) won't
transform annotations to text properties even if the file contains them.

The other two options read annotations as they are encountered on file
but differ in the way they write them to the file.  The @code{Standard}
method puts strings (@code{<<speck-foo:} and @code{speck-foo>>}) around
every single stretch of text checked with dictionary @code{foo}.  If
these strings might confuse other applications operating on that file,
try the @code{EOF} (@code{End of file}) method which puts all
annotations on a single, commented-out line at the end of the file.  For
a comparison of these methods have a look at the two files
@file{carbonara-std.txt} and @file{carbonara-eof.txt} distributed
together with this manual.

Speck also permits to save word lists to the file visited by a buffer
and restore these lists when you visit the file again.  For this purpose
words are inserted in a @dfn{Local Words Section} near the end of the
file.  The option @code{speck-save-words} specifies whether word lists
shall be saved and restored.  @code{speck-save-words-string} lets you
specify the header string of the Local Words Section,
@code{speck-save-words-regexp} the regular expression used to search for
that header.

Finally, Speck permits to save options like the current dictionary or
filter mode to the file visited by a buffer and restore these options
when you visit the file again.  For this purpose, options are inserted
in the file after any Local Words Section but before any Local Variables
section.  The option @code{speck-save-options} specifies whether such
options shall be saved and restored.

@code{speck-save-dictionary-string} specifies the string inserted when
writing out the name of the buffer local dictionary.  With
@code{speck-save-dictionary-regexp} you specify the regular expression
for identifying the buffer local dictionary when a file is visited.

The option @code{speck-save-permanent} tells Speck whether changing a
specification like adding a word to the Local Words Section shall be
considered ``permanent'' or not.  If this option is @code{nil}, changing
such a specification will (1) make the current buffer appear modified if
it was unmodified before, and (2) can be undone via @kbd{C-_}.  If this
option is non-@code{nil}, changing a specification will not make the
current buffer appear modified and cannot be undone.  If this option
equals @code{adjust} buffer changes following the affected section at
the end of the file are adjusted so that undoing them later is done
correctly.



@node Additional Functionality, Aspell Interface, Saving Settings to File, top
@unnumbered Additional Functionality

To find doublets set @code{speck-doublets} to a non-@code{nil} value.
This will highlight the second of two identical words separated by
whitespace only.  The words must not be misspelled and are highlighted
with the face @code{speck-doublet}.


Often you don't want to spell-check parts of a buffer's text because you
are annoyed by the plethora of highlighted misspellings.  Sometimes this
problem can be handled by the spell-checker engine which may be aware
of special words like reserved identifiers in TeX or addresses in
mail buffers.  Speck offers the following additional approaches to
tackle this problem:

@itemize @bullet
@item
Customizing @code{speck-syntactic} allows to highlight misspelled words
within comment or strings only.  This is useful for programming modes
where you usually do not want to spell-check ordinary program text.

@item
Customizing @code{speck-face-inhibit-list} permits to not highlight
misspelled words when the word's face is contained in that list.  Note
that this solution works because Speck examines only words displayed on
your screen.  This solution will probably not work when you have turned
off syntax-highlighting (@code{font-lock-mode}) for the current buffer.

@item
Activate the buffer region you do not want to spell-check, type
@kbd{C-?} (@code{speck-multi-set}), and enter @kbd{--} at the prompt.
Unlike the former approaches this will also avoid that Speck sends text
in this region to the spell-checker engine.  Whether and how this
affects text you enter near the region is explained in the section on
dictionary properties (@pxref{Handling Dictionaries}).

@item
In mail buffers you usually don't want to spell-check citations.  Speck
offers the option @code{speck-email-citations} for this purpose.  If you
set this to a face value Speck will not examine text displayed with that
face.  If you set this to a regular expression, Speck will not examine
text when the beginning of the line where the text appears matches that
regular expression.
@end itemize

@noindent
In text buffers you can try to auto-correct the case of words you enter
by customizing the option @code{speck-auto-correct-case} as follows:

@multitable @columnfractions .15 .85
@item @code{Never}
@tab Do not auto-correct case.
@item @code{Two}
@tab Auto-correct a word if and only if down-casing the second character
yields a correct word.  This is useful to catch typing errors where you
accidentally hold the shift key down while typing the second character
of a word.
@item @code{One}
@tab Auto-correct a word if there's a unique correct word differing in case only.
@item @code{Always}
@tab Auto-correct a word if Speck finds a correct word differing in case
only.
@end multitable

@noindent
The option @code{speck-auto-correct-minimum-length} lets you specify the
minimum length of words that shall be auto-corrected.



@node Aspell Interface, Ispell Interface, Additional Functionality, top
@unnumbered The Aspell Interface

The options described here are useful for tuning Speck's interaction
with the Aspell program.  Most of these options are invalid or void when
Aspell is either not installed on your system or Speck cannot find it.
Customizing an option will take effect only for future invocations of
@code{speck-mode}.

@code{speck-aspell-home-dir} specifies the directory where your personal
word lists reside.  @code{speck-personal-dictionary-file} specifies the
relative name of your personal dictionary file.  If this option is
non-@code{nil}, Speck asks Aspell to search for a file of this name in
the directory specified by @code{speck-aspell-home-dir}.  The default
setting leaves it to Aspell to determine the name of this file.  When
working with multiple dictionaries it seems better to leave this option
alone.  Otherwise Aspell won't be able to add a word to the word list
corresponding to the respective dictionary.

@code{speck-aspell-default-dictionary-name} specifies the name of the
Aspell default dictionary.  The default dictionary is used to check the
spelling of a buffer unless you specify another dictionary via
@code{speck-buffer} or a file-local variable.

@code{speck-aspell-language-options} is a list with an entry for each
language recognized by Aspell.  Each entry is composed of five elements:

@enumerate
@item
The two letter ISO-639 language code.

@item
The coding system for sending text to and receiving text from Aspell.

@item
A minimum word length telling Aspell to ignore words shorter than that.

@item
A run-together words entry telling Aspell the maximum number of words
that can be strung together (where the value @code{t} means no limit).

@item
Extra arguments passed to Aspell.
@end enumerate

Specifying a value of @code{None} (@code{nil}) for entries 2--4 means do
not pass a value for these options to Aspell.  You can override these
settings in a language independent manner by customizing the options
@code{speck-aspell-coding-system},
@code{speck-aspell-minimum-word-length},
@code{speck-aspell-maximum-run-together}, and
@code{speck-aspell-extra-arguments}.

@code{speck-aspell-suggestion-mode} permits to set the suggestion mode
of Aspell.  The default value does not pass a suggestion mode to the
Aspell process.  On slow systems @code{Ultra} is recommended.  With
Aspell 0.60 the method @code{Fast} seems identical to @code{Ultra}.

The @code{speck-filter-mode} option lets you pass a filter mode to
Aspell.  As a consequence the latter can be enabled to not examine URLs,
Email addresses, or reserved words in TeX buffers.



@node Ispell Interface, Problems and Extensions, Aspell Interface, top
@unnumbered The Ispell Interface

The options below can be used to tune the interaction of Speck with the
Ispell program.  Most of these options are invalid or void when Ispell
has not been installed on your system or Speck is not able to find it.
Customizing an option will take effect only for future invocations of
@code{speck-mode}.

@code{speck-ispell-library-directory} specifies the directory name of
Ispell's dictionaries.  @code{speck-iso-639-1-alist} specifies a list
associating ISO-639-1 language codes with language names.  This list
will ideally provide associations for all languages handled by Ispell.
Speck's lighter can display this code in the mode line provided it finds
a corresponding association.  Otherwise the lighter will display the
first two characters of the dictionary name.

@code{speck-ispell-dictionary-alist} is a list associating a language
code with Ispell dictionary names.  This list is generated from the
option @code{speck-iso-639-1-alist} and the dictionaries found in
@code{speck-ispell-library-directory}.  If this list contains two or
more entries for the same language code, Speck may display the wrong
language code in the mode line.  Hence, you should make sure that every
language code occurs once only in this list.  The preferred way to do
this is by adding an association to @code{speck-iso-639-1-alist}.

@code{speck-ispell-default-dictionary-name} specifies the name of Ispell
default dictionary.  The default dictionary is used for spell checking a
buffer unless you specify another dictionary via @code{speck-buffer} or
a file-local variable.

@code{speck-ispell-language-options} should specify a list with an entry
for each language recognized by Ispell.  A general way to ask Ispell for
these informations doesn't seem to exist.  The current default was
produced by copying some settings from @code{ispell-dictionary-alist}
for a few languages.  Each entry is composed of five elements:

@enumerate
@item
The two letter ISO-639-1 language code.  For establishing a
correspondence of language codes and dictionary names in
@code{speck-ispell-library-directory} you should customize
@code{speck-ispell-dictionary-alist}.

@item
The coding system for sending text to and receiving text from the Ispell
process for this language.  The current default should make sure that
spell-checking accented characters works for the languages listed there.

@item
A minimum word length which tells Ispell to ignore words shorter than
that.

@item
A run-together words flag telling Ispell whether words can be strung
together.

@item
Extra Arguments passed to Ispell.
@end enumerate

Specifying @code{None} (@code{nil}) for entries 2--4 means do not pass a
value for this option to Ispell.  You can override these
settings in a language independent manner by customizing
@code{speck-ispell-coding-system},
@code{speck-ispell-minimum-word-length},
@code{speck-ispell-maximum-run-together}, and
@code{speck-ispell-extra-arguments}.



@node Problems and Extensions, , Ispell Interface, top
@unnumbered Problems and Extensions

Speck has been tested with GNU Emacs 22 and 23.  It probably won't work
with earlier versions of GNU Emacs and XEmacs.  Speck has been tried
with Aspell version 0.60 and Ispell version 3.1.  With earlier versions
of Aspell, setting up the defaults of Aspell options (@pxref{Aspell
Interface}) might not work properly and you will have to adjust them
manually.  With Ispell (@pxref{Ispell Interface}) most options must be
adjusted manually anyway.

If Speck doesn't work on your system proceed as follows:

@itemize @bullet
@item
Make sure that Speck has been loaded.  You can tell Emacs to load Speck
by typing @kbd{M-x load-file} and the name of the file @file{speck.el}
(or @file{speck.elc} if you have byte-compiled it) on your system.

@item
Type @kbd{M-$} (@code{ispell-word}) to make sure that you have a working
Aspell or Ispell environment on your system.  Check the values of
@code{speck-aspell-program} and @code{speck-ispell-program} to make sure
that Speck has found the Aspell/Ispell executables.

@item
After typing @kbd{M-x speck-mode} look whether Speck has successfully
started the Aspell/Ispell process.  If your operating system has no
support for asynchronous processes, Speck will @emph{not} work.

@item
If Speck works correctly for one language but fails for others first
make sure that the appropriate Aspell/Ispell dictionary has been
installed.  If highlighting misspelled words appears garbled you may
have to adapt the coding system.  For Aspell customize the options
@code{speck-aspell-language-options} and/or
@code{speck-aspell-coding-system}.  For Ispell you should customize
@code{speck-ispell-language-options} or
@code{speck-ispell-coding-system}.
@end itemize

Speck has the following deficiencies that should be removed in future
versions:

@itemize @bullet
@item
Support for filters (@code{speck-filter-mode}) is marginal and has been
hardly tested.

@item
Word completion is not supported yet.  You have to fall back on
@code{ispell-complete-word} for this purpose.

@item
Adding word pairs to Aspell's ``replacement dictionary'' using the
Aspell command interface @code{$$ra} doesn't seem to work yet.

@item
Indenting or filling a paragraph causes Speck to reexamine the entire
paragraph.
@end itemize

Over the past years attempts have been made to automatically detect the
language used in an Emacs buffer or paragraph:

@itemize @bullet
@item
Benjamin Drieu's @code{guess-lang} package can be found here:
@indicateurl{http://www.grassouille.org/code/sources/guess-lang.el}.

@item
Colin Marquardt's @code{auto-lang} package is available here:
@indicateurl{http://www.marquardt-home.de/auto-lang.el}.

@item
Nikolaj Schumacher's @code{auto-dictionary-mode}, see
@indicateurl{http://nschum.de/src/emacs/auto-dictionary/}.
@end itemize

@noindent
It would be nice to incorporate one or a combination of these methods to
automatically set up (or suggest) a dictionary for text examined by
Speck.  Finally, Speck should be able to handle

@itemize @bullet
@item
the xml:lang attribute of XML documents, and

@item
Babel commands in LaTeX files
@end itemize

@noindent
automatically as @code{flyspell-xml-lang} and @code{flyspell-babel},
see @indicateurl{http://www.dur.ac.uk/p.j.heslin/Software/Emacs/}.

Feel free to send complaints and suggestions to
@email{rudalics@@gmx.at}.

@ifnottex
@contents
@end ifnottex
@bye
